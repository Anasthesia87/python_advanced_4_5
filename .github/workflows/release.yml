name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Test app
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: postgres
      DATABASE_ENGINE: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      BASE_URL: http://127.0.0.1:8002
      DATABASE_POOL_SIZE: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install psycopg2-binary docker-compose

      - name: Start services
        run: docker-compose up -d db

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if docker-compose exec db pg_isready -U postgres; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Build app
        run: docker-compose build app

      - name: Run tests
        run: |
          docker-compose run --rm app pytest tests --junit-xml=test-results.xml

      - name: Copy test results
        run: |
          docker cp $(docker-compose ps -q app):/app/test-results.xml .

      - name: Show test results
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true

      - name: Stop services
        if: always()
        run: docker-compose down

  release:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - run: gh release create $(git rev-parse --short HEAD) --generate-notes

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying..."